Time : O(2 pow n)
Space : O(N)

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {
        Queue<TreeNode> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            int size=q.size();
            int x1=x;
            int y1=y;
            for(int i=0;i<size;i++){
                TreeNode curr=q.poll();
                if(x1!=0 && curr.val==x1){
                    x1-=x;
                }else if(y1!=0 && curr.val==y1){
                    y1-=y;
                }
                
                if(curr.left!=null &&  curr.right!=null){
                    if(curr.left.val==x && curr.right.val==y){
                        return false;
                    }if(curr.left.val==y && curr.right.val==x){
                        return false;
                    }
                }
                if(curr.left!=null) q.add(curr.left);
                if(curr.right!=null) q.add(curr.right);
       
                
            }
            if(x1==0 && y1==0){
                return true;
            }
        }
        return false;
        
    }
}
